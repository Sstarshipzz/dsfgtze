async def handle_user_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """GÃ¨re l'affichage des statistiques utilisateurs"""
    try:
        text = "ğŸ‘¥ *Gestion des utilisateurs*\n\n"
        text += f"Utilisateurs enregistrÃ©s : {len(self._users)}\n\n"
    
        if self._users:
            text += "Derniers utilisateurs actifs :\n"
            for user_id, user_data in list(self._users.items())[:10]:
                # RÃ©cupÃ©rer le username, first_name et last_name
                username = user_data.get('username')
                first_name = user_data.get('first_name')
                last_name = user_data.get('last_name')
                
                # Logique pour dÃ©terminer quel nom afficher
                if username:
                    display_name = f"@{username}"
                elif first_name and last_name:
                    display_name = f"{first_name} {last_name} `{user_id}`"
                elif first_name:
                    display_name = f"{first_name} `{user_id}`"
                elif last_name:
                    display_name = f"{last_name} `{user_id}`"
                else:
                    display_name = f"Sans nom `{user_id}`"
                
                # Ã‰chapper les caractÃ¨res spÃ©ciaux Markdown
                if display_name is not None:
                    display_name = display_name.replace('_', '\\_').replace('*', '\\*')
                
                last_seen = user_data.get('last_seen', 'Jamais')
                text += f"â€¢ {display_name} \\- DerniÃ¨re activitÃ© : {last_seen}\n"
        else:
            text += "Aucun utilisateur enregistrÃ©."

        keyboard = [[InlineKeyboardButton("ğŸ”™ Retour", callback_data="admin")]]
    
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
        return "CHOOSING"
    
    except Exception as e:
        print(f"Erreur dans handle_user_management : {e}")
        try:
            text = "ğŸ‘¥ Gestion des utilisateurs\n\n"
            text += f"Utilisateurs enregistrÃ©s : {len(self._users)}\n\n"
    
            if self._users:
                text += "Derniers utilisateurs actifs :\n"
                for user_id, user_data in list(self._users.items())[:10]:
                    username = user_data.get('username')
                    first_name = user_data.get('first_name')
                    last_name = user_data.get('last_name')
                    
                    if username:
                        display_name = f"@{username}"
                    elif first_name and last_name:
                        display_name = f"{first_name} {last_name} `{user_id}`"
                    elif first_name:
                        display_name = f"{first_name} `{user_id}`"
                    elif last_name:
                        display_name = f"{last_name} `{user_id}`"
                    else:
                        display_name = f"Sans nom `{user_id}`"
                        
                    last_seen = user_data.get('last_seen', 'Jamais')
                    text += f"â€¢ {display_name} - DerniÃ¨re activitÃ© : {last_seen}\n"
            else:
                text += "Aucun utilisateur enregistrÃ©."

            keyboard = [[InlineKeyboardButton("ğŸ”™ Retour", callback_data="admin")]]
    
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        except Exception as e2:
            print(f"DeuxiÃ¨me erreur dans handle_user_management : {e2}")
            await update.callback_query.edit_message_text(
                "Erreur lors de l'affichage des utilisateurs.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("ğŸ”™ Retour", callback_data="admin")
                ]])
            )
        return "CHOOSING"
